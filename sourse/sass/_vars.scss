

@include font-face (Manrope, "../fonts/Manrope-Regular/Manrope-Regular", $file-formats: eot woff ttf);
@include font-face (Manrope, "../fonts/Manrope-Bold/Manrope-Bold", bold, $file-formats: eot woff ttf);
@include font-face (Manrope, "../fonts/Manrope-Light/Manrope-Light", 300, $file-formats: eot woff ttf);
@include font-face (Manrope, "../fonts/Manrope-Medium/Manrope-Medium", 500, $file-formats: eot woff ttf);
@include font-face (Manrope, "../fonts/Manrope-Semibold/Manrope-Semibold", 600, $file-formats: eot woff ttf);
@include font-face (Manrope, "../fonts/Manrope-Thin/Manrope-Thin", 100, $file-formats: eot woff ttf);

//new
@include font-face (Manrope, "../fonts/Manrope-Thin/Manrope-Thin", 100, $file-formats: eot woff ttf);
$mono2: 'PT Sans';

$default-font: Manrope;

$dark-blue: #293846;
$dark-blue2: #37536D;
$teal: #28B0A0;
$teal2: #3DCDB0;
$red: #FF4949;
$light: #AFBECC;

$def: #373a41;
$em-base: 15px;
$small: rem(14);



//end new

// обсалютное центрирование
@mixin a-cent($w: -50%, $h: -50%) {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate($w, $h); // Breakpoints
}
@mixin  a-centt($xy:xy) {
  @if $xy == xy {
    position: absolute;
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  }
  @else if $xy == x {
    position: absolute;
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  }
  @else if $xy == y {
    position: absolute;
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

@mixin roww($a){
	margin-left: rem(-$a);
	margin-right: rem(-$a);
	>*{
		padding-left: rem($a);
		padding-right: rem($a);
	}
}

@mixin center($w){
  margin-left: auto;
  margin-right: auto;
  max-width: #{$w}px;
}
// color в rgba
@mixin rgba($c, $a) {
	background-color: rgba($color:$c, $alpha: $a);
}
@mixin bgs($w: center, $h: center){
  background-size: cover;
  background-repeat: no-repeat;
  background-position: $w $h;
}
@mixin img-bg($w: center, $h: center){
  position: relative;
	background-size: cover;
  background-repeat: no-repeat;
  background-position: $w $h;
  img{
    position: absolute;
    z-index: -1;
    opacity: 0 !important;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
  }
}



@mixin bgsn($img, $w: center, $h: center){
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
  background-image: url($img);
}
@mixin mt($s: .36){
  transition: all #{$s}s ;}
@mixin c-white{
  color: #fff;}
@mixin c-dark{
  color: #000  ;}


@mixin fontello($icon, $fz){
  content: $icon;
  font-family: "fontello";
  font-style: normal;
  font-weight: normal;
  font-size: $fz;
}
@mixin awe($icon, $fz){
  content: $icon;
  font-family: 'FontAwesome';
  font-style: normal;
  font-weight: normal;
  font-size: $fz;
}

@mixin fab($icon){
  content: $icon;
  font-family: 'Font Awesome 5 Brands';
  font-style: normal;
  font-weight: normal;

}

@mixin far($icon){
  content: $icon;
  font-family: 'Font Awesome 5 Pro';
  font-style: normal;
  font-weight: normal;

}

@mixin fas($icon){
  content: $icon;
  font-family: 'Font Awesome 5 Pro';
  font-style: normal;
  // font-weight: normal;
  font-weight: 900;

}
@mixin fal($icon){
  content: $icon;
  font-family: 'Font Awesome 5 Pro';
  font-style: normal;
  // font-weight: normal;
  font-weight: 300;

}



// михин многоточия
@mixin ellips{
   white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  // display: block;
  // display: inline-block;
}

 
@mixin input-placeholder {
  &.placeholder { @content; }
}
// масштвбирование блока пропорционально
@mixin block($w: 1, $h: 1){
  display: block;
  position: relative;
  height: 0;
  padding-bottom: ($h/$w *100%);
}
@mixin round($w){
	display: -webkit-inline-flex;
	display: -ms-inline-flex;
	display: inline-flex;
	align-items: center;
	justify-content: center;
	border-radius: 50%;
	width: #{$w}px;
	height: #{$w}px;
}
// для анимации
@mixin keyfr($name) {

  @keyframes #{$name} {
    @content;
  }
}

// for BEM
@mixin elem($name) {
  @at-root #{&}__#{$name} {
    @content;
  }
}

@mixin mod($name) {
  @at-root #{&}-#{$name} {
    @content;
  }
}

// .block {
//   color: red;
//
//   @include element(element) {
//     color: green;
//
//     @include modifier(modifier) {
//       color: blue;
//     }
//   }
// }

@mixin padding($values...) {
    @each $var in $values {
        padding: #{$var};
    }
}
